#!/usr/bin/python
#
# Copyright 2012 Juliano Martinez
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez
# @author: Gleicon Moraes

from gevent import monkey
monkey.patch_all()

import os
import re
import pwd
import sys
import time
import gevent
import getopt
import logging
import ConfigParser
from supay import Daemon
from gevent import socket
from kombu import Exchange, Queue
from kombu import BrokerConnection
from kombu.common import maybe_declare
from kombu.pools import producers, connections, reset

debug = False
hostname = os.uname()[1]
severity = ['emerg', 'alert', 'crit', 'err', 'warn', 'notice', 'info', 'debug']
facility = ['kern', 'user', 'mail', 'daemon', 'auth', 'syslog', 'lpr',
            'news', 'uucp', 'cron', 'authpriv', 'ftp', 'ntp', 'audit',
            'alert', 'at', 'local0', 'local1', 'local2', 'local3',
            'local4', 'local5', 'local6', 'local7']

fs_match = re.compile("^<(.+?)>([A-Z]{3} .*)", re.I)


def parse_and_queue_datagram(line, host, queue, connection):
    parsed = {}
    (fac, sev, parsed['line']) = _calc_lvl(line.strip())
    parsed['host'] = host if not '127.0.0.1' in host else hostname
    parsed['timestamp'] = time.time()
    parsed['facility'] = fac
    parsed['level'] = sev
    parsed['version'] = '1.0'
    parsed['short_message'] = "%s" % (parsed['line'])

    try:
        with connections[connection].acquire(block=True, timeout=10) as conn:
            with conn.SimpleQueue(queue) as queue:
                queue.put(parsed, serializer="json", expiration=message_ttl)
    except Exception, e:
        print "Exception: %s" % e
        connection.close()


def _calc_lvl(line):
    lvl = fs_match.split(line)
    if lvl and len(lvl) > 1:
        i = int(lvl[1])
        fac = i / 8
        sev = i % 8
        return (facility[fac].capitalize(), sev, lvl[2])
    return (None, None, lvl[2])


def clean_greenlets(greenlets):
    time.sleep(2)
    try:
        gevent.killall(greenlets)
    except Exception, e:
        print "Got exception %s killing greenlets" % e
    finally:
        return []


def prepare_server(config):
    connection = BrokerConnection(config.get('transport', 'url'))
    if config.getboolean('transport', 'connection_pool_enabled'):
        pool_size = config.getint('transport', 'connection_pool_size')
        connection.Pool(pool_size, pool_size / 5)
    connection.ensure_connection()
    connection.connect()

    server = socket.socket(
        family=socket.AF_INET,
        type=socket.SOCK_DGRAM,
        proto=socket.IPPROTO_UDP
    )
    server.bind((config.get('server', 'bind_addr'),
                 config.getint('server', 'port')))

    return (connection, server)


def help():
    print "Usage: %s" % sys.argv[0]
    print " -h help"
    print " -u username"
    print " -d debug"
    print " -a <start|stop|status|foreground>"
    sys.exit(1)


def main(user):
    os.setuid(pwd.getpwnam(user)[2])
    logging.info("Starting Logix")
    config_file = '/etc/logix/logix.conf' if os.path.isfile(
        '/etc/logix/logix.conf'
    ) else os.getenv('LOGIX_CONF')
    if not os.path.isfile(config_file):
        logging.error("Config file %s not found" % config_file)
        sys.exit(1)

    config = ConfigParser.RawConfigParser()
    config.read(config_file)

    connection, server = prepare_server(config)
    queue = config.get('transport', 'queue')
    max_syslog_line_size = config.getint('server', 'max_syslog_line_size')
    clean_after = config.getint('transport', 'clean_after')
    global message_ttl
    message_ttl = config.get('transport', 'message_ttl')
    greenlets = []
    while True:
        try:
            if not connection.connected or (len(greenlets) >= clean_after):
                greenlets = clean_greenlets(greenlets)
                reset()
                connection.connect()

            data, peer = server.recvfrom(max_syslog_line_size - 1)
            if debug:
                print "Received new data: %s" % data
            greenlets.append(gevent.spawn(
                parse_and_queue_datagram, data,
                peer, queue, connection
            ))
        except socket.error:
            print "Connection refused at broker, retrying"
        except socket.timeout:
            print "Connection timeout with broker, retrying"
        except Exception as e:
            print "Unknown error %s, retrying" % str(e)


if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "a:u:d", ["action=", "user="])
    except getopt.GetoptError, err:
        help()

    user = 'logix'
    action = 'start'
    for o, a in opts:
        if o in ('-a', '--action'):
            action = a
        elif o in ('-u', '--user'):
            user = a
        elif o in ('-d'):
            debug = True
        else:
            help()

    daemon = Daemon(name='logix', catch_all_log="/var/log/logix.log")
    if action == 'start':
        daemon.start()
        main(user)
    elif action == 'status':
        daemon.status()
    elif action == 'stop':
        daemon.stop()
    elif action == 'foreground':
        main(user)
